quit()
wplot
Sims.wplot
quit()
quit()
using Sims, Lexicon
@query reinit
@query RefBranch
@query Branch
reload("Lexicon")
reload("Lexicon")
save("/home/tshort/.julia/v0.3/Sims/docs/api/index.html", Sims)
save("/home/tshort/.julia/v0.3/Sims/docs/api/index.md", Sims)
methods(save)
methods(save)
quit()
using Lexicon
methods(save)
pwd()
using Sims
save("/home/tshort/.julia/v0.3/Sims/docs/api/index.md", Sims)
reload("Lexicon")
save("/home/tshort/.julia/v0.3/Sims/docs/api/index.md", Sims)
methods(writemime)
reload("Lexicon")
reload("Lexicon")
save("/home/tshort/.julia/v0.3/Sims/docs/api/index.md", Sims)
reload("Lexicon")
save("/home/tshort/.julia/v0.3/Sims/docs/api/index.md", Sims)
reload("Lexicon")
save("/home/tshort/.julia/v0.3/Sims/docs/api/index.md", Sims)
reload("Lexicon")
save("/home/tshort/.julia/v0.3/Sims/docs/api/index.md", Sims)
methods(writemime)
reload("Lexicon")
save("/home/tshort/.julia/v0.3/Sims/docs/api/index.md", Sims)
save("/home/tshort/.julia/v0.3/Sims/docs/api/index.md", Sims)
reload("Lexicon")
save("/home/tshort/.julia/v0.3/Sims/docs/api/index.md", Sims)
save("/home/tshort/.julia/v0.3/Sims/docs/api.md", Sims)
reload("Lexicon")
save("/home/tshort/.julia/v0.3/Sims/docs/api.md", Sims)
reload("Lexicon")
pwd()
setwd("../docs")
cd("../docs")
quit()
include("build.jl")
quit()
include("build.jl")
include("build.jl")
include("build.jl")
include("build.jl")
pwd()
include("build.jl")
quit()
include("build.jl")
quit()
using DataFrames, DataFramesMeta
using Lazy
using Lexicon
@query @with
d = DataFrame(a = 1:10, b = 11:21)
d = DataFrame(a = 1:10, b = 11:20)
@with(d, :a + :b)
DataFrameMeta.@with(d, :a + :b)
DataFramesMeta.@with(d, :a + :b)
@where(d, :a .> 5)
DataFramesMeta@where(d, :a .> 5)
DataFramesMeta.@where(d, :a .> 5)
quit()
using DataFrames, DataFramesMeta
using Lazy
d = DataFrame(a = 1:10, b = 11:20)
@with(d, :a + :b)
DataFramesMeta.@with(d, :a + :b)
quit()
using DataFrames, DataFramesMeta
d = DataFrame(a = 1:10, b = 11:20)
DataFramesMeta.@with(d, :a + :b)
quit()
using DataFrames, DataFramesMeta
reload("DataFramesMeta")
d = DataFrame(a = 1:10, b = 11:20)
DataFramesMeta.@with(d, :a + :b)
reload("DataFramesMeta")
DataFramesMeta.@with(d, :a + :b)
x = 3
reload("DataFramesMeta")
macroexpand(:(@with(d, :a + :b)))
d
@with(d, :a)
using DataFramesMeta
@with(d, :a)
macroexpand(:(@with(d, :a + :b)))
reload("DataFramesMeta")
using DataFramesMeta
quit()
using DataFrames,DataFramesMeta
d = DataFrame(a = 1:10, b = 11:20)
@with(d, :a)
@where(d, :a .> 5)
using Lazy
@with(d, :a)
@where(d, :a .> 5)
pwd()
cd("../../DataFramesMeta")
include("test/runtests.jl")
quit()
using Lazy
using DataFrames,DataFramesMeta
d = DataFrame(a = 1:10, b = 11:20)
@where(d, :a .> 5)
@with(d, :a)
using Lexicon
d = documentation(Lexicon)
d = Lexicon.documentation(Lexicon)
dump(d)
filter
Documentation
Lexicon.Documentation
using Docile
methods(Documentation)
methods(Docile.Documentation)
methods(Lexicon.Documentation)
methods(Documentation)
methods(documentation)
methods(Docile.documentation)
methods(Docile.Interface.documentation)
Documentation
methods(filter)
filter((k,v) -> true, d.entries)
filter(d.entries)
d.entries
collect(values(d.entries))
dump(collect(values(d.entries)))
dump(collect(values(d.entries)))
methods(filter!)
contains
help(contains)
d
dump(d)
filter(d, files = ["doctest"])
d.modname
deepcopy(d.entries)
copy(d.entries)
filter(d, files = ["doctest"])
filter(d, files = ["doctest"])
methods(filter!)
methods(map)
methods(any)
quit()
pwd()
d = Lexicon.documentation(Lexicon)
filter(d, files = ["doctest"])
help(any)
methods(any)
filter(d, files = ["doctest"])
methods(filter!)
ents
files = ["doctest"]
methods(any)
d.entries
dump(d)
Page
filter(Lexicon, files = ["doctest"])
methods(Documentation)
Pkg.checkout(Docile)
Pkg.checkout("Docile")
quit()
using Docile
using Docile.Interface
d = documentation(Docile)
dump(d)
methods(Metadata)
d
filter(Lexicon, files = ["doctest"])
filter(Docile, files = ["doctest"])
documentation(d)
filter(d, files = ["doctest"])
dump(d)
filter(d, files = ["doctest"])
filter(d, files = ["types"])
dump(filter(d, files = ["types"]))
dump(filter(d, files = ["xxx"]))
dd = filter(d, files = ["xxx"]);
length(dd.entries)
length(d.entries)
dd = filter(d, files = ["types.jl"]);
length(dd.entries)
Pkg.checkout(Winston)
Pkg.checkout("Lexicon")
using Lexicon
dump(d)
dump(d)
using Lexicon
methods(save)
methods(writemime)
manual(d)
dump(d)
dir()
ls()
help(readall)
d.entries
names(d.entries)
writeobj
Lexicon.writeobj
methods(Lexicon.writeobj)
d.entries
vv = collect(values(d.entries))
vv[1].data[:source]
Pkg.add(Gaston)
Pkg.add("Gaston")
d
d.entries
collect(documentation(Sims.Lib))
collect(documentation(Sims.Lib).entries)
collect(values(documentation(Sims.Lib).entries))
dump(collect(values(documentation(Sims.Lib).entries)))
[writeobj(k) for k in keys(documentation(Sims.Lib).entries))]
[writeobj(k) for k in keys(documentation(Sims.Lib).entries)]
help(sortperm)
methods(sortperm)
methods(sort)
sort([(1,2), 1,3)]
sort([(1,2), (1,3)]
)
sort([(1,2), (1,3), (-1,3), (0,4), (1, 1)]
)
sortperm([(1,2), (1,3), (-1,3), (0,4), (1, 1)])
zip([1,2,3],[5,3,4])
collect(zip([1,2,3],[5,3,4]))
collect(values(documentation(Sims.Lib).entries))
dump(collect(values(documentation(Sims.Lib).entries)))
a = collect(values(documentation(Sims.Lib).entries))[1]
dump(a)
a = @query Sims "types.jl"
a = @query Sims
a = @query "Sims"
a = [:z => 1, :a => 4, :m => 5]
a = [:z => 1, :a => 4, :m => 5]
collect(keys(a))
a
a = collect(values(documentation(Sims.Lib).entries))[1]
dump(a)
typeof(a)
d
docs = d
quit()
docs = documentation(Docile)
length(name)
length(source)
length(data)
length(category)
length(category)
quit()
docs = documentation(Docile)
[d[o] for o in order]
order = [:category, :name, :source]
[d[o] for o in order]
collect(zip([d[o] for o in order]))
collect(zip([d[o] for o in order]...))
quit()
e
help(e)
methods(MathConst)
pi
dump(pi)
xdump(pi)
big(pi)
Lexicon
DocTag()
DocTag(3)
DocTag(:hi)
sort([true, false, true])
help(isa)
isa(DocTag(3), DocTag)
typeof(DocTag(3))
DocTag(3) :< DocTag
DocTag(3) <: DocTag
DocTag() <: DocTag
Int <: DocTag
typeof(DocTag())
Docile
@doc "hi" DocTag
@doc "hi" -> DocTag
@doc "hi" -> :DocTag
@doc "hi" -> typealias x DocTag{:x}
end
@doc "hi" -> @doctag
@doc "hi" -> @doctag
macroexpand(:@doctag)
@doctag
@doctag
@doctag
@doctag
macroexpand(:@doctag)
Expr(gensym())
DocTag{gensym()}
dump(:(gensym{:X}))
@doctag
@doc "hi" -> @doctag
typealias qer DocTag{:x}
@doc "xx" -> typealias qerr DocTag{:x}
macroexpand(:@doctag)
@doctag "xx"
@doctag "xx"
isa(Int, Type)
isa(sinh, Type)
documentation(Main)
documentation(Main).entries
@doctag "hello"
documentation(Main).entries
quit()
using Sims
documentation(Sims).entries
a=collect(keys(documentation(Sims).entries))
printall(a)
showall(a)
documentation(Sims.Lib).entries
a=collect(keys(documentation(Sims.Lib).entries))
showall(a)
documentation(Sims.Lib).entries[DocTag{symbol("##8184")}]
documentation(Sims.Lib).entries[DocTag{symbol("##8182")}]
dump(documentation(Sims.Lib).entries[DocTag{symbol("##8182")}])
reload("Sims")
reload("Sims")
reload("Sims")
dump(documentation(Sims.Lib).entries)
documentation(Sims.Lib).entries
dump(documentation(Sims.Lib).entries[DocTag{symbol("##8254")}])
dump(documentation(Sims.Lib).entries[symbol("##8254")})
dump(documentation(Sims.Lib).entries[symbol("##8254"))
dump(documentation(Sims.Lib).entries[symbol("##8254")])
dump(documentation(Sims.Lib).entries[eval(symbol("##8254"))])
dump(documentation(Sims.Lib).entries[eval(symbol("##8254"), Sims.Lib)])
help(eval)
dump(documentation(Sims.Lib).entries[eval(Sims.Lib, symbol("##8254"))])
quit()
using Sims, Docile.Interface
documentation(Sims.Lib).entries
a=collect(keys(documentation(Sims.Lib).entries))
showall(a)
dump(documentation(Sims.Lib).entries[eval(Sims.Lib, symbol("##8063"))])
reload("Sims")
a=collect(keys(documentation(Sims.Lib).entries))
showall(a)
dump(documentation(Sims.Lib).entries[eval(Sims.Lib, symbol("##8240"))])
reload("Sims")
@doctag
reload("Sims")
@doctag
quit()
